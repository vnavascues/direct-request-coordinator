type = "directrequest"
schemaVersion = 1
# Replace (1 of 3) with DRCoordinator.sol address
requesters = [
    "0x0000000000000000000000000000000000000000"
]
minContractPaymentLinkJuels = "0"
name = "SDIO Sportsdataio Get Schedule v2.0.3 - DRC"
contractAddress = "0x0000000000000000000000000000000000000000"  # Replace (2 of 3) with Operator.sol address
maxTaskDuration = "0s"
observationSource = """
    decode_log          [
                         type="ethabidecodelog"
                         abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                         data="$(jobRun.logData)"
                         topics="$(jobRun.logTopics)"
                        ]

    decode_cbor         [type="cborparse" data="$(decode_log.data)"]

    merge_req_params    [type="merge" left=<{"gameIds": null}> right="$(decode_cbor)"]

    sportsdataio_lp     [
                         type="bridge"
                         name="sportsdataio-lp"
                         requestData=<{
                            "data": {
                                "endpoint": "schedule",
                                "market": $(merge_req_params.market),
                                "leagueId": $(merge_req_params.leagueId),
                                "date": $(merge_req_params.date),
                                "gameIds": $(merge_req_params.gameIds)
                            }
                         }>
                        ]

    parse_result        [type="jsonparse" data="$(sportsdataio_lp)" path="result"]

    encode_data         [
                         type="ethabiencode2"
                         abi=<{
                            "inputs": [
                              {
                                 "name": "requestId",
                                 "type": "bytes32"
                              },
                              {
                                 "name": "data",
                                 "type": "bytes32[]"
                              }
                            ]
                         }>
                         data=<{
                            "requestId": $(decode_log.requestId),
                            "data": $(parse_result)
                         }>
                        ]

    encode_data_drc     [
                         type="ethabiencode2"
                         abi=<{
                            "inputs": [
                              {
                                 "name": "requestId",
                                 "type": "bytes32"
                              },
                              {
                                 "name": "data",
                                 "type": "bytes"
                              }
                            ]
                         }>
                         data=<{
                            "requestId": $(decode_log.requestId),
                            "data": $(encode_data)
                         }>
                        ]

    encode_tx           [
                         type="ethabiencode2"
                         abi=<{
                           "name": "fulfillOracleRequest2",
                           "inputs": [
                              {
                                 "name": "requestId",
                                 "type": "bytes32"
                              },
                              {
                                 "name": "payment",
                                 "type": "uint256"
                              },
                              {
                                 "name": "callbackAddress",
                                 "type": "address"
                              },
                              {
                                 "name": "callbackFunctionId",
                                 "type": "bytes4"
                              },
                              {
                                 "name": "expiration",
                                 "type": "uint256"
                              },
                              {
                                 "name": "data",
                                 "type": "bytes"
                              }
                           ]
                         }>
                         data=<{
                            "requestId": $(decode_log.requestId),
                            "payment": $(decode_log.payment),
                            "callbackAddress": $(decode_log.callbackAddr),
                            "callbackFunctionId": $(decode_log.callbackFunctionId),
                            "expiration": $(decode_log.cancelExpiration),
                            "data": $(encode_data_drc)
                         }>
                        ]

    submit_tx           [
                         type="ethtx" to="0x0000000000000000000000000000000000000000"
                         data="$(encode_tx)"
                         gasLimit="$(decode_cbor.gasLimit)"
                         failOnRevert=true
                        ] // Replace (3 of 3) with Operator.sol address

    decode_log -> decode_cbor -> merge_req_params -> sportsdataio_lp -> parse_result -> encode_data -> encode_data_drc -> encode_tx -> submit_tx
"""
